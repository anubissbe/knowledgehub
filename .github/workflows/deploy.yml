name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  SYNOLOGY_HOST: 192.168.1.24
  SYNOLOGY_USER: Bert
  SYNOLOGY_PORT: 2222
  REMOTE_PATH: /volume1/docker/knowledgehub

jobs:
  test:
    name: Run Tests
    runs-on: self-hosted
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Run Python tests
      run: |
        pytest src/api/tests -v --cov=src/api || echo "Tests not yet available"
        pytest src/rag_processor/tests -v --cov=src/rag_processor || echo "Tests not yet available"
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install frontend dependencies
      working-directory: src/web-ui
      run: npm ci
    
    - name: Run frontend tests
      working-directory: src/web-ui
      run: npm test || echo "Frontend tests not yet configured"

  build:
    name: Build Docker Images
    runs-on: self-hosted
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build images
      run: |
        docker compose build
    
    - name: Save images
      run: |
        mkdir -p artifacts
        for service in postgres redis weaviate minio api mcp-server scraper rag-processor scheduler frontend; do
          if docker images | grep -q "knowledgehub-$service"; then
            docker save knowledgehub-$service:latest | gzip > artifacts/knowledgehub-$service.tar.gz
          fi
        done
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: docker-images
        path: artifacts/
        retention-days: 1

  deploy:
    name: Deploy to Synology
    runs-on: self-hosted
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: docker-images
        path: artifacts/
    
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SYNOLOGY_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -p ${{ env.SYNOLOGY_PORT }} -H ${{ env.SYNOLOGY_HOST }} >> ~/.ssh/known_hosts
    
    - name: Deploy to Synology
      run: |
        # Copy docker-compose and configs
        scp -P ${{ env.SYNOLOGY_PORT }} docker-compose.yml ${{ env.SYNOLOGY_USER }}@${{ env.SYNOLOGY_HOST }}:${{ env.REMOTE_PATH }}/
        scp -P ${{ env.SYNOLOGY_PORT }} -r config ${{ env.SYNOLOGY_USER }}@${{ env.SYNOLOGY_HOST }}:${{ env.REMOTE_PATH }}/ || echo "Config directory not found"
        
        # Transfer and load images
        for image in artifacts/*.tar.gz; do
          if [ -f "$image" ]; then
            echo "Transferring $(basename $image)..."
            scp -P ${{ env.SYNOLOGY_PORT }} $image ${{ env.SYNOLOGY_USER }}@${{ env.SYNOLOGY_HOST }}:${{ env.REMOTE_PATH }}/
            
            echo "Loading $(basename $image)..."
            ssh -p ${{ env.SYNOLOGY_PORT }} ${{ env.SYNOLOGY_USER }}@${{ env.SYNOLOGY_HOST }} \
              "cd ${{ env.REMOTE_PATH }} && gunzip -c $(basename $image) | docker load && rm $(basename $image)"
          fi
        done
        
        # Restart services
        ssh -p ${{ env.SYNOLOGY_PORT }} ${{ env.SYNOLOGY_USER }}@${{ env.SYNOLOGY_HOST }} \
          "cd ${{ env.REMOTE_PATH }} && docker compose down && docker compose up -d"
    
    - name: Health check
      run: |
        echo "Waiting for services to start..."
        sleep 60
        
        # Check key endpoints
        curl -f http://${{ env.SYNOLOGY_HOST }}:3000/api/v1/sources/ || echo "API endpoint not ready yet"
        curl -f http://${{ env.SYNOLOGY_HOST }}:3100 || echo "Frontend not ready yet"
        
        echo "✅ Deployment completed!"

  notify:
    name: Notify Results
    runs-on: self-hosted
    needs: [test, build, deploy]
    if: always()
    
    steps:
    - name: Send notification
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment successful to ${{ env.SYNOLOGY_HOST }}"
        else
          echo "❌ Deployment failed"
        fi